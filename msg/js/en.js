// This file was automatically generated.  Do not modify.

'use strict';

goog.provide('Blockly.Msg.en');

goog.require('Blockly.Msg');

/** @export */ Blockly.Msg.ADD_COMMENT = "Add Comment";
/** @export */ Blockly.Msg.ARD_ANALOGREAD = "read analog pin#";
/** @export */ Blockly.Msg.ARD_ANALOGREAD_TIP = "Return value between 0 and 1024";
/** @export */ Blockly.Msg.ARD_ANALOGWRITE = "set analog pin#";
/** @export */ Blockly.Msg.ARD_ANALOGWRITE_TIP = "Write analog value between 0 and 255 to a specific PWM Port";
/** @export */ Blockly.Msg.ARD_BUILTIN_LED = "set built-in LED";
/** @export */ Blockly.Msg.ARD_BUILTIN_LED_TIP = "Light on or off for the built-in LED of the Arduino";
/** @export */ Blockly.Msg.ARD_COMPONENT_WARN1 = "A %1 configuration block with the same %2 name must be added to use this block!";
/** @export */ Blockly.Msg.ARD_DEFINE = "Define";
/** @export */ Blockly.Msg.ARD_DIGITALREAD = "read digital pin#";
/** @export */ Blockly.Msg.ARD_DIGITALREAD_TIP = "Read digital value on a pin: HIGH or LOW";
/** @export */ Blockly.Msg.ARD_DIGITALWRITE = "set digitial pin#";
/** @export */ Blockly.Msg.ARD_DIGITALWRITE_TIP = "Write digital value HIGH or LOW to a specific Port";
/** @export */ Blockly.Msg.ARD_FUN_RUN_LOOP = "Loop forever:";
/** @export */ Blockly.Msg.ARD_FUN_RUN_SETUP = "Run first:";
/** @export */ Blockly.Msg.ARD_FUN_RUN_TIP = "Defines the OXOcard setup() and loop() functions.";
/** @export */ Blockly.Msg.ARD_HIGH = "HIGH";
/** @export */ Blockly.Msg.ARD_HIGHLOW_TIP = "Set a pin state logic High or Low.";
/** @export */ Blockly.Msg.ARD_LOW = "LOW";
/** @export */ Blockly.Msg.ARD_MAP = "Map";
/** @export */ Blockly.Msg.ARD_MAP_TIP = "Re-maps a number from [0-1024] to another.";
/** @export */ Blockly.Msg.ARD_MAP_VAL = "value to [0-";
/** @export */ Blockly.Msg.ARD_NOTONE = "Turn off tone on pin #";
/** @export */ Blockly.Msg.ARD_NOTONE_PIN = "No tone PIN#";
/** @export */ Blockly.Msg.ARD_NOTONE_PIN_TIP = "Stop generating a tone on a pin";
/** @export */ Blockly.Msg.ARD_NOTONE_TIP = "Turns the tone off on the selected pin";
/** @export */ Blockly.Msg.ARD_PIN_WARN1 = "Pin %1 is needed for %2 as pin %3. Already used as %4.";
/** @export */ Blockly.Msg.ARD_PULSETIMEOUT_TIP = "Measures the duration of a pulse on the selected pin, if it is within the time-out in microseconds.";
/** @export */ Blockly.Msg.ARD_PULSE_READ = "measure %1 pulse on pin #%2";
/** @export */ Blockly.Msg.ARD_PULSE_READ_TIMEOUT = "measure %1 pulse on pin #%2 (timeout after %3 Î¼s)";
/** @export */ Blockly.Msg.ARD_PULSE_TIP = "Measures the duration of a pulse on the selected pin.";
/** @export */ Blockly.Msg.ARD_SERIAL_BPS = "bps";
/** @export */ Blockly.Msg.ARD_SERIAL_PRINT = "print";
/** @export */ Blockly.Msg.ARD_SERIAL_PRINT_NEWLINE = "add new line";
/** @export */ Blockly.Msg.ARD_SERIAL_PRINT_TIP = "Prints data to the console/serial port as human-readable ASCII text.";
/** @export */ Blockly.Msg.ARD_SERIAL_PRINT_WARN = "A setup block for %1 must be added to the workspace to use this block!";
/** @export */ Blockly.Msg.ARD_SERIAL_SETUP = "Setup";
/** @export */ Blockly.Msg.ARD_SERIAL_SETUP_TIP = "Selects the speed for a specific Serial peripheral";
/** @export */ Blockly.Msg.ARD_SERIAL_SPEED = ":  speed to";
/** @export */ Blockly.Msg.ARD_SERVO_READ = "read SERVO from PIN#";
/** @export */ Blockly.Msg.ARD_SERVO_READ_TIP = "Read a Servo angle";
/** @export */ Blockly.Msg.ARD_SERVO_WRITE = "set SERVO from Pin";
/** @export */ Blockly.Msg.ARD_SERVO_WRITE_DEG_180 = "Degrees (0~180)";
/** @export */ Blockly.Msg.ARD_SERVO_WRITE_TIP = "Set a Servo to an specified angle";
/** @export */ Blockly.Msg.ARD_SERVO_WRITE_TO = "to";
/** @export */ Blockly.Msg.ARD_SETTONE = "Set tone on pin #";
/** @export */ Blockly.Msg.ARD_SPI_SETUP = "Setup";
/** @export */ Blockly.Msg.ARD_SPI_SETUP_CONF = "configuration:";
/** @export */ Blockly.Msg.ARD_SPI_SETUP_DIVIDE = "clock divide";
/** @export */ Blockly.Msg.ARD_SPI_SETUP_LSBFIRST = "LSBFIRST";
/** @export */ Blockly.Msg.ARD_SPI_SETUP_MODE = "SPI mode (idle - edge)";
/** @export */ Blockly.Msg.ARD_SPI_SETUP_MODE0 = "0 (Low - Falling)";
/** @export */ Blockly.Msg.ARD_SPI_SETUP_MODE1 = "1 (Low - Rising)";
/** @export */ Blockly.Msg.ARD_SPI_SETUP_MODE2 = "2 (High - Falling)";
/** @export */ Blockly.Msg.ARD_SPI_SETUP_MODE3 = "3 (High - Rising)";
/** @export */ Blockly.Msg.ARD_SPI_SETUP_MSBFIRST = "MSBFIRST";
/** @export */ Blockly.Msg.ARD_SPI_SETUP_SHIFT = "data shift";
/** @export */ Blockly.Msg.ARD_SPI_SETUP_TIP = "Configures the SPI peripheral.";
/** @export */ Blockly.Msg.ARD_SPI_TRANSRETURN_TIP = "Send a SPI message to an specified slave device and get data back.";
/** @export */ Blockly.Msg.ARD_SPI_TRANS_NONE = "none";
/** @export */ Blockly.Msg.ARD_SPI_TRANS_SLAVE = "to slave pin";
/** @export */ Blockly.Msg.ARD_SPI_TRANS_TIP = "Send a SPI message to an specified slave device.";
/** @export */ Blockly.Msg.ARD_SPI_TRANS_VAL = "transfer";
/** @export */ Blockly.Msg.ARD_SPI_TRANS_WARN1 = "A setup block for %1 must be added to the workspace to use this block!";
/** @export */ Blockly.Msg.ARD_SPI_TRANS_WARN2 = "Old pin value %1 is no longer available.";
/** @export */ Blockly.Msg.ARD_STEPPER_COMPONENT = "stepper";
/** @export */ Blockly.Msg.ARD_STEPPER_DEFAULT_NAME = "MyStepper";
/** @export */ Blockly.Msg.ARD_STEPPER_FOUR_PINS = "4";
/** @export */ Blockly.Msg.ARD_STEPPER_MOTOR = "stepper motor:";
/** @export */ Blockly.Msg.ARD_STEPPER_NUMBER_OF_PINS = "Number of pins";
/** @export */ Blockly.Msg.ARD_STEPPER_PIN1 = "pin1#";
/** @export */ Blockly.Msg.ARD_STEPPER_PIN2 = "pin2#";
/** @export */ Blockly.Msg.ARD_STEPPER_PIN3 = "pin3#";
/** @export */ Blockly.Msg.ARD_STEPPER_PIN4 = "pin4#";
/** @export */ Blockly.Msg.ARD_STEPPER_REVOLVS = "how many steps per revolution";
/** @export */ Blockly.Msg.ARD_STEPPER_SETUP = "Setup stepper motor";
/** @export */ Blockly.Msg.ARD_STEPPER_SETUP_TIP = "Configures a stepper motor pinout and other settings.";
/** @export */ Blockly.Msg.ARD_STEPPER_SPEED = "set speed (rpm) to";
/** @export */ Blockly.Msg.ARD_STEPPER_STEP = "move stepper";
/** @export */ Blockly.Msg.ARD_STEPPER_STEPS = "steps";
/** @export */ Blockly.Msg.ARD_STEPPER_STEP_TIP = "Turns the stepper motor a specific number of steps.";
/** @export */ Blockly.Msg.ARD_STEPPER_TWO_PINS = "2";
/** @export */ Blockly.Msg.ARD_TIME_DELAY = "wait";
/** @export */ Blockly.Msg.ARD_TIME_DELAY_MICROS = "microseconds";
/** @export */ Blockly.Msg.ARD_TIME_DELAY_MICRO_TIP = "Wait specific time in microseconds";
/** @export */ Blockly.Msg.ARD_TIME_DELAY_TIP = "Wait specific time in milliseconds";
/** @export */ Blockly.Msg.ARD_TIME_INF = "wait forever (end program)";
/** @export */ Blockly.Msg.ARD_TIME_INF_TIP = "Wait indefinitely, stopping the program.";
/** @export */ Blockly.Msg.ARD_TIME_MICROS = "current elapsed Time (microseconds)";
/** @export */ Blockly.Msg.ARD_TIME_MICROS_TIP = "Returns the number of microseconds since the Arduino board began running the current program. Has to be stored in a positive long integer";
/** @export */ Blockly.Msg.ARD_TIME_MILLIS = "current elapsed Time (milliseconds)";
/** @export */ Blockly.Msg.ARD_TIME_MILLIS_TIP = "Returns the number of milliseconds since the Arduino board began running the current program. Has to be stored in a positive long integer";
/** @export */ Blockly.Msg.ARD_TIME_MS = "milliseconds";
/** @export */ Blockly.Msg.ARD_TONEFREQ = "at frequency";
/** @export */ Blockly.Msg.ARD_TONE_FREQ = "frequency";
/** @export */ Blockly.Msg.ARD_TONE_PIN = "Tone PIN#";
/** @export */ Blockly.Msg.ARD_TONE_PIN_TIP = "Generate audio tones on a pin";
/** @export */ Blockly.Msg.ARD_TONE_TIP = "Sets tone on pin to specified frequency within range 31 - 65535";
/** @export */ Blockly.Msg.ARD_TONE_WARNING = "Frequency must be in range 31 - 65535";
/** @export */ Blockly.Msg.ARD_TYPE_ARRAY = "Array";
/** @export */ Blockly.Msg.ARD_TYPE_BOOL = "Boolean";
/** @export */ Blockly.Msg.ARD_TYPE_CHAR = "Character";
/** @export */ Blockly.Msg.ARD_TYPE_CHILDBLOCKMISSING = "ChildBlockMissing";
/** @export */ Blockly.Msg.ARD_TYPE_DECIMAL = "Decimal";
/** @export */ Blockly.Msg.ARD_TYPE_LONG = "Large Number";
/** @export */ Blockly.Msg.ARD_TYPE_NULL = "Null";
/** @export */ Blockly.Msg.ARD_TYPE_NUMBER = "Number";
/** @export */ Blockly.Msg.ARD_TYPE_SHORT = "Short Number";
/** @export */ Blockly.Msg.ARD_TYPE_TEXT = "Text";
/** @export */ Blockly.Msg.ARD_TYPE_UNDEF = "Undefined";
/** @export */ Blockly.Msg.ARD_VAR_AS = "as";
/** @export */ Blockly.Msg.ARD_VAR_AS_TIP = "Sets a value to a specific type";
/** @export */ Blockly.Msg.ARD_WRITE_TO = "to";
/** @export */ Blockly.Msg.CANNOT_DELETE_VARIABLE_PROCEDURE = "Can't delete the variable '%1' because it's part of the definition of the function '%2'";
/** @export */ Blockly.Msg.CHANGE_VALUE_TITLE = "Change value:";
/** @export */ Blockly.Msg.CLEAN_UP = "Clean up Blocks";
/** @export */ Blockly.Msg.COLLAPSE_ALL = "Collapse Blocks";
/** @export */ Blockly.Msg.COLLAPSE_BLOCK = "Collapse Block";
/** @export */ Blockly.Msg.COLOUR_BLEND_COLOUR1 = "colour 1";
/** @export */ Blockly.Msg.COLOUR_BLEND_COLOUR2 = "colour 2";
/** @export */ Blockly.Msg.COLOUR_BLEND_HELPURL = "http://meyerweb.com/eric/tools/color-blend/";
/** @export */ Blockly.Msg.COLOUR_BLEND_RATIO = "ratio";
/** @export */ Blockly.Msg.COLOUR_BLEND_TITLE = "blend";
/** @export */ Blockly.Msg.COLOUR_BLEND_TOOLTIP = "Blends two colours together with a given ratio (0.0 - 1.0).";
/** @export */ Blockly.Msg.COLOUR_PICKER_HELPURL = "https://en.wikipedia.org/wiki/Color";
/** @export */ Blockly.Msg.COLOUR_PICKER_TOOLTIP = "Choose a colour from the palette.";
/** @export */ Blockly.Msg.COLOUR_RANDOM_HELPURL = "http://randomcolour.com";
/** @export */ Blockly.Msg.COLOUR_RANDOM_TITLE = "random colour";
/** @export */ Blockly.Msg.COLOUR_RANDOM_TOOLTIP = "Choose a colour at random.";
/** @export */ Blockly.Msg.COLOUR_RGB_BLUE = "blue";
/** @export */ Blockly.Msg.COLOUR_RGB_GREEN = "green";
/** @export */ Blockly.Msg.COLOUR_RGB_HELPURL = "http://www.december.com/html/spec/colorper.html";
/** @export */ Blockly.Msg.COLOUR_RGB_RED = "red";
/** @export */ Blockly.Msg.COLOUR_RGB_TITLE = "colour with";
/** @export */ Blockly.Msg.COLOUR_RGB_TOOLTIP = "Create a colour with the specified amount of red, green, and blue. All values must be between 0 and 100.";
/** @export */ Blockly.Msg.CONTROLS_FLOW_STATEMENTS_HELPURL = "https://github.com/google/blockly/wiki/Loops#loop-termination-blocks";
/** @export */ Blockly.Msg.CONTROLS_FLOW_STATEMENTS_OPERATOR_BREAK = "break out of loop";
/** @export */ Blockly.Msg.CONTROLS_FLOW_STATEMENTS_OPERATOR_CONTINUE = "continue with next iteration of loop";
/** @export */ Blockly.Msg.CONTROLS_FLOW_STATEMENTS_TOOLTIP_BREAK = "Break out of the containing loop.";
/** @export */ Blockly.Msg.CONTROLS_FLOW_STATEMENTS_TOOLTIP_CONTINUE = "Skip the rest of this loop, and continue with the next iteration.";
/** @export */ Blockly.Msg.CONTROLS_FLOW_STATEMENTS_WARNING = "Warning: This block may only be used within a loop.";
/** @export */ Blockly.Msg.CONTROLS_FOREACH_HELPURL = "https://github.com/google/blockly/wiki/Loops#for-each";
/** @export */ Blockly.Msg.CONTROLS_FOREACH_TITLE = "for each item %1 in list %2";
/** @export */ Blockly.Msg.CONTROLS_FOREACH_TOOLTIP = "For each item in a list, set the variable '%1' to the item, and then do some statements.";
/** @export */ Blockly.Msg.CONTROLS_FOR_HELPURL = "https://github.com/google/blockly/wiki/Loops#count-with";
/** @export */ Blockly.Msg.CONTROLS_FOR_TITLE = "count with %1 from %2 to %3 by %4";
/** @export */ Blockly.Msg.CONTROLS_FOR_TOOLTIP = "Have the variable '%1' take on the values from the start number to the end number, counting by the specified interval, and do the specified blocks.";
/** @export */ Blockly.Msg.CONTROLS_IF_ELSEIF_TOOLTIP = "Add a condition to the if block.";
/** @export */ Blockly.Msg.CONTROLS_IF_ELSE_TOOLTIP = "Add a final, catch-all condition to the if block.";
/** @export */ Blockly.Msg.CONTROLS_IF_HELPURL = "https://github.com/google/blockly/wiki/IfElse";
/** @export */ Blockly.Msg.CONTROLS_IF_IF_TOOLTIP = "Add, remove, or reorder sections to reconfigure this if block.";
/** @export */ Blockly.Msg.CONTROLS_IF_MSG_ELSE = "else";
/** @export */ Blockly.Msg.CONTROLS_IF_MSG_ELSEIF = "else if";
/** @export */ Blockly.Msg.CONTROLS_IF_MSG_IF = "if";
/** @export */ Blockly.Msg.CONTROLS_IF_TOOLTIP_1 = "If a value is true, then do some statements.";
/** @export */ Blockly.Msg.CONTROLS_IF_TOOLTIP_2 = "If a value is true, then do the first block of statements. Otherwise, do the second block of statements.";
/** @export */ Blockly.Msg.CONTROLS_IF_TOOLTIP_3 = "If the first value is true, then do the first block of statements. Otherwise, if the second value is true, do the second block of statements.";
/** @export */ Blockly.Msg.CONTROLS_IF_TOOLTIP_4 = "If the first value is true, then do the first block of statements. Otherwise, if the second value is true, do the second block of statements. If none of the values are true, do the last block of statements.";
/** @export */ Blockly.Msg.CONTROLS_REPEAT_HELPURL = "https://en.wikipedia.org/wiki/For_loop";
/** @export */ Blockly.Msg.CONTROLS_REPEAT_INPUT_DO = "do";
/** @export */ Blockly.Msg.CONTROLS_REPEAT_TITLE = "repeat %1 times";
/** @export */ Blockly.Msg.CONTROLS_REPEAT_TOOLTIP = "Do some statements several times.";
/** @export */ Blockly.Msg.CONTROLS_WHILEUNTIL_HELPURL = "https://github.com/google/blockly/wiki/Loops#repeat";
/** @export */ Blockly.Msg.CONTROLS_WHILEUNTIL_OPERATOR_UNTIL = "repeat until";
/** @export */ Blockly.Msg.CONTROLS_WHILEUNTIL_OPERATOR_WHILE = "repeat while";
/** @export */ Blockly.Msg.CONTROLS_WHILEUNTIL_TOOLTIP_UNTIL = "While a value is false, then do some statements.";
/** @export */ Blockly.Msg.CONTROLS_WHILEUNTIL_TOOLTIP_WHILE = "While a value is true, then do some statements.";
/** @export */ Blockly.Msg.DELETE_ALL_BLOCKS = "Delete all %1 blocks?";
/** @export */ Blockly.Msg.DELETE_BLOCK = "Delete Block";
/** @export */ Blockly.Msg.DELETE_VARIABLE = "Delete the '%1' variable";
/** @export */ Blockly.Msg.DELETE_VARIABLE_CONFIRMATION = "Delete %1 uses of the '%2' variable?";
/** @export */ Blockly.Msg.DELETE_X_BLOCKS = "Delete %1 Blocks";
/** @export */ Blockly.Msg.DISABLE_BLOCK = "Disable Block";
/** @export */ Blockly.Msg.DUPLICATE_BLOCK = "Duplicate";
/** @export */ Blockly.Msg.ENABLE_BLOCK = "Enable Block";
/** @export */ Blockly.Msg.EXPAND_ALL = "Expand Blocks";
/** @export */ Blockly.Msg.EXPAND_BLOCK = "Expand Block";
/** @export */ Blockly.Msg.EXTERNAL_INPUTS = "External Inputs";
/** @export */ Blockly.Msg.HELP = "Help";
/** @export */ Blockly.Msg.INLINE_INPUTS = "Inline Inputs";
/** @export */ Blockly.Msg.IOS_CANCEL = "Cancel";
/** @export */ Blockly.Msg.IOS_ERROR = "Error";
/** @export */ Blockly.Msg.IOS_OK = "OK";
/** @export */ Blockly.Msg.IOS_PROCEDURES_ADD_INPUT = "+ Add Input";
/** @export */ Blockly.Msg.IOS_PROCEDURES_ALLOW_STATEMENTS = "Allow statements";
/** @export */ Blockly.Msg.IOS_PROCEDURES_DUPLICATE_INPUTS_ERROR = "This function has duplicate inputs.";
/** @export */ Blockly.Msg.IOS_PROCEDURES_INPUTS = "INPUTS";
/** @export */ Blockly.Msg.IOS_VARIABLES_ADD_BUTTON = "Add";
/** @export */ Blockly.Msg.IOS_VARIABLES_ADD_VARIABLE = "+ Add Variable";
/** @export */ Blockly.Msg.IOS_VARIABLES_DELETE_BUTTON = "Delete";
/** @export */ Blockly.Msg.IOS_VARIABLES_EMPTY_NAME_ERROR = "You can't use an empty variable name.";
/** @export */ Blockly.Msg.IOS_VARIABLES_RENAME_BUTTON = "Rename";
/** @export */ Blockly.Msg.IOS_VARIABLES_VARIABLE_NAME = "Variable name";
/** @export */ Blockly.Msg.LISTS_CREATE_EMPTY_HELPURL = "https://github.com/google/blockly/wiki/Lists#create-empty-list";
/** @export */ Blockly.Msg.LISTS_CREATE_EMPTY_TITLE = "create empty list";
/** @export */ Blockly.Msg.LISTS_CREATE_EMPTY_TOOLTIP = "Returns a list, of length 0, containing no data records";
/** @export */ Blockly.Msg.LISTS_CREATE_WITH_CONTAINER_TITLE_ADD = "list";
/** @export */ Blockly.Msg.LISTS_CREATE_WITH_CONTAINER_TOOLTIP = "Add, remove, or reorder sections to reconfigure this list block.";
/** @export */ Blockly.Msg.LISTS_CREATE_WITH_HELPURL = "https://github.com/google/blockly/wiki/Lists#create-list-with";
/** @export */ Blockly.Msg.LISTS_CREATE_WITH_INPUT_WITH = "create list with";
/** @export */ Blockly.Msg.LISTS_CREATE_WITH_ITEM_TOOLTIP = "Add an item to the list.";
/** @export */ Blockly.Msg.LISTS_CREATE_WITH_TOOLTIP = "Create a list with any number of items.";
/** @export */ Blockly.Msg.LISTS_GET_INDEX_FIRST = "first";
/** @export */ Blockly.Msg.LISTS_GET_INDEX_FROM_END = "# from end";
/** @export */ Blockly.Msg.LISTS_GET_INDEX_FROM_START = "#";
/** @export */ Blockly.Msg.LISTS_GET_INDEX_GET = "get";
/** @export */ Blockly.Msg.LISTS_GET_INDEX_GET_REMOVE = "get and remove";
/** @export */ Blockly.Msg.LISTS_GET_INDEX_LAST = "last";
/** @export */ Blockly.Msg.LISTS_GET_INDEX_RANDOM = "random";
/** @export */ Blockly.Msg.LISTS_GET_INDEX_REMOVE = "remove";
/** @export */ Blockly.Msg.LISTS_GET_INDEX_TAIL = "";
/** @export */ Blockly.Msg.LISTS_GET_INDEX_TOOLTIP_GET_FIRST = "Returns the first item in a list.";
/** @export */ Blockly.Msg.LISTS_GET_INDEX_TOOLTIP_GET_FROM = "Returns the item at the specified position in a list.";
/** @export */ Blockly.Msg.LISTS_GET_INDEX_TOOLTIP_GET_LAST = "Returns the last item in a list.";
/** @export */ Blockly.Msg.LISTS_GET_INDEX_TOOLTIP_GET_RANDOM = "Returns a random item in a list.";
/** @export */ Blockly.Msg.LISTS_GET_INDEX_TOOLTIP_GET_REMOVE_FIRST = "Removes and returns the first item in a list.";
/** @export */ Blockly.Msg.LISTS_GET_INDEX_TOOLTIP_GET_REMOVE_FROM = "Removes and returns the item at the specified position in a list.";
/** @export */ Blockly.Msg.LISTS_GET_INDEX_TOOLTIP_GET_REMOVE_LAST = "Removes and returns the last item in a list.";
/** @export */ Blockly.Msg.LISTS_GET_INDEX_TOOLTIP_GET_REMOVE_RANDOM = "Removes and returns a random item in a list.";
/** @export */ Blockly.Msg.LISTS_GET_INDEX_TOOLTIP_REMOVE_FIRST = "Removes the first item in a list.";
/** @export */ Blockly.Msg.LISTS_GET_INDEX_TOOLTIP_REMOVE_FROM = "Removes the item at the specified position in a list.";
/** @export */ Blockly.Msg.LISTS_GET_INDEX_TOOLTIP_REMOVE_LAST = "Removes the last item in a list.";
/** @export */ Blockly.Msg.LISTS_GET_INDEX_TOOLTIP_REMOVE_RANDOM = "Removes a random item in a list.";
/** @export */ Blockly.Msg.LISTS_GET_SUBLIST_END_FROM_END = "to # from end";
/** @export */ Blockly.Msg.LISTS_GET_SUBLIST_END_FROM_START = "to #";
/** @export */ Blockly.Msg.LISTS_GET_SUBLIST_END_LAST = "to last";
/** @export */ Blockly.Msg.LISTS_GET_SUBLIST_HELPURL = "https://github.com/google/blockly/wiki/Lists#getting-a-sublist";
/** @export */ Blockly.Msg.LISTS_GET_SUBLIST_START_FIRST = "get sub-list from first";
/** @export */ Blockly.Msg.LISTS_GET_SUBLIST_START_FROM_END = "get sub-list from # from end";
/** @export */ Blockly.Msg.LISTS_GET_SUBLIST_START_FROM_START = "get sub-list from #";
/** @export */ Blockly.Msg.LISTS_GET_SUBLIST_TAIL = "";
/** @export */ Blockly.Msg.LISTS_GET_SUBLIST_TOOLTIP = "Creates a copy of the specified portion of a list.";
/** @export */ Blockly.Msg.LISTS_INDEX_FROM_END_TOOLTIP = "%1 is the last item.";
/** @export */ Blockly.Msg.LISTS_INDEX_FROM_START_TOOLTIP = "%1 is the first item.";
/** @export */ Blockly.Msg.LISTS_INDEX_OF_FIRST = "find first occurrence of item";
/** @export */ Blockly.Msg.LISTS_INDEX_OF_HELPURL = "https://github.com/google/blockly/wiki/Lists#getting-items-from-a-list";
/** @export */ Blockly.Msg.LISTS_INDEX_OF_LAST = "find last occurrence of item";
/** @export */ Blockly.Msg.LISTS_INDEX_OF_TOOLTIP = "Returns the index of the first/last occurrence of the item in the list. Returns %1 if item is not found.";
/** @export */ Blockly.Msg.LISTS_INLIST = "in list";
/** @export */ Blockly.Msg.LISTS_ISEMPTY_HELPURL = "https://github.com/google/blockly/wiki/Lists#is-empty";
/** @export */ Blockly.Msg.LISTS_ISEMPTY_TITLE = "%1 is empty";
/** @export */ Blockly.Msg.LISTS_ISEMPTY_TOOLTIP = "Returns true if the list is empty.";
/** @export */ Blockly.Msg.LISTS_LENGTH_HELPURL = "https://github.com/google/blockly/wiki/Lists#length-of";
/** @export */ Blockly.Msg.LISTS_LENGTH_TITLE = "length of %1";
/** @export */ Blockly.Msg.LISTS_LENGTH_TOOLTIP = "Returns the length of a list.";
/** @export */ Blockly.Msg.LISTS_REPEAT_HELPURL = "https://github.com/google/blockly/wiki/Lists#create-list-with";
/** @export */ Blockly.Msg.LISTS_REPEAT_TITLE = "create list with item %1 repeated %2 times";
/** @export */ Blockly.Msg.LISTS_REPEAT_TOOLTIP = "Creates a list consisting of the given value repeated the specified number of times.";
/** @export */ Blockly.Msg.LISTS_REVERSE_HELPURL = "https://github.com/google/blockly/wiki/Lists#reversing-a-list";
/** @export */ Blockly.Msg.LISTS_REVERSE_MESSAGE0 = "reverse %1";
/** @export */ Blockly.Msg.LISTS_REVERSE_TOOLTIP = "Reverse a copy of a list.";
/** @export */ Blockly.Msg.LISTS_SET_INDEX_HELPURL = "https://github.com/google/blockly/wiki/Lists#in-list--set";
/** @export */ Blockly.Msg.LISTS_SET_INDEX_INPUT_TO = "as";
/** @export */ Blockly.Msg.LISTS_SET_INDEX_INSERT = "insert at";
/** @export */ Blockly.Msg.LISTS_SET_INDEX_SET = "set";
/** @export */ Blockly.Msg.LISTS_SET_INDEX_TOOLTIP_INSERT_FIRST = "Inserts the item at the start of a list.";
/** @export */ Blockly.Msg.LISTS_SET_INDEX_TOOLTIP_INSERT_FROM = "Inserts the item at the specified position in a list.";
/** @export */ Blockly.Msg.LISTS_SET_INDEX_TOOLTIP_INSERT_LAST = "Append the item to the end of a list.";
/** @export */ Blockly.Msg.LISTS_SET_INDEX_TOOLTIP_INSERT_RANDOM = "Inserts the item randomly in a list.";
/** @export */ Blockly.Msg.LISTS_SET_INDEX_TOOLTIP_SET_FIRST = "Sets the first item in a list.";
/** @export */ Blockly.Msg.LISTS_SET_INDEX_TOOLTIP_SET_FROM = "Sets the item at the specified position in a list.";
/** @export */ Blockly.Msg.LISTS_SET_INDEX_TOOLTIP_SET_LAST = "Sets the last item in a list.";
/** @export */ Blockly.Msg.LISTS_SET_INDEX_TOOLTIP_SET_RANDOM = "Sets a random item in a list.";
/** @export */ Blockly.Msg.LISTS_SORT_HELPURL = "https://github.com/google/blockly/wiki/Lists#sorting-a-list";
/** @export */ Blockly.Msg.LISTS_SORT_ORDER_ASCENDING = "ascending";
/** @export */ Blockly.Msg.LISTS_SORT_ORDER_DESCENDING = "descending";
/** @export */ Blockly.Msg.LISTS_SORT_TITLE = "sort %1 %2 %3";
/** @export */ Blockly.Msg.LISTS_SORT_TOOLTIP = "Sort a copy of a list.";
/** @export */ Blockly.Msg.LISTS_SORT_TYPE_IGNORECASE = "alphabetic, ignore case";
/** @export */ Blockly.Msg.LISTS_SORT_TYPE_NUMERIC = "numeric";
/** @export */ Blockly.Msg.LISTS_SORT_TYPE_TEXT = "alphabetic";
/** @export */ Blockly.Msg.LISTS_SPLIT_HELPURL = "https://github.com/google/blockly/wiki/Lists#splitting-strings-and-joining-lists";
/** @export */ Blockly.Msg.LISTS_SPLIT_LIST_FROM_TEXT = "make list from text";
/** @export */ Blockly.Msg.LISTS_SPLIT_TEXT_FROM_LIST = "make text from list";
/** @export */ Blockly.Msg.LISTS_SPLIT_TOOLTIP_JOIN = "Join a list of texts into one text, separated by a delimiter.";
/** @export */ Blockly.Msg.LISTS_SPLIT_TOOLTIP_SPLIT = "Split text into a list of texts, breaking at each delimiter.";
/** @export */ Blockly.Msg.LISTS_SPLIT_WITH_DELIMITER = "with delimiter";
/** @export */ Blockly.Msg.LOGIC_BOOLEAN_FALSE = "false";
/** @export */ Blockly.Msg.LOGIC_BOOLEAN_HELPURL = "https://github.com/google/blockly/wiki/Logic#values";
/** @export */ Blockly.Msg.LOGIC_BOOLEAN_TOOLTIP = "Returns either true or false.";
/** @export */ Blockly.Msg.LOGIC_BOOLEAN_TRUE = "true";
/** @export */ Blockly.Msg.LOGIC_COMPARE_HELPURL = "https://en.wikipedia.org/wiki/Inequality_(mathematics)";
/** @export */ Blockly.Msg.LOGIC_COMPARE_TOOLTIP_EQ = "Return true if both inputs equal each other.";
/** @export */ Blockly.Msg.LOGIC_COMPARE_TOOLTIP_GT = "Return true if the first input is greater than the second input.";
/** @export */ Blockly.Msg.LOGIC_COMPARE_TOOLTIP_GTE = "Return true if the first input is greater than or equal to the second input.";
/** @export */ Blockly.Msg.LOGIC_COMPARE_TOOLTIP_LT = "Return true if the first input is smaller than the second input.";
/** @export */ Blockly.Msg.LOGIC_COMPARE_TOOLTIP_LTE = "Return true if the first input is smaller than or equal to the second input.";
/** @export */ Blockly.Msg.LOGIC_COMPARE_TOOLTIP_NEQ = "Return true if both inputs are not equal to each other.";
/** @export */ Blockly.Msg.LOGIC_NEGATE_HELPURL = "https://github.com/google/blockly/wiki/Logic#not";
/** @export */ Blockly.Msg.LOGIC_NEGATE_TITLE = "not %1";
/** @export */ Blockly.Msg.LOGIC_NEGATE_TOOLTIP = "Returns true if the input is false. Returns false if the input is true.";
/** @export */ Blockly.Msg.LOGIC_NULL = "null";
/** @export */ Blockly.Msg.LOGIC_NULL_HELPURL = "https://en.wikipedia.org/wiki/Nullable_type";
/** @export */ Blockly.Msg.LOGIC_NULL_TOOLTIP = "Returns null.";
/** @export */ Blockly.Msg.LOGIC_OPERATION_AND = "and";
/** @export */ Blockly.Msg.LOGIC_OPERATION_HELPURL = "https://github.com/google/blockly/wiki/Logic#logical-operations";
/** @export */ Blockly.Msg.LOGIC_OPERATION_OR = "or";
/** @export */ Blockly.Msg.LOGIC_OPERATION_TOOLTIP_AND = "Return true if both inputs are true.";
/** @export */ Blockly.Msg.LOGIC_OPERATION_TOOLTIP_OR = "Return true if at least one of the inputs is true.";
/** @export */ Blockly.Msg.LOGIC_TERNARY_CONDITION = "test";
/** @export */ Blockly.Msg.LOGIC_TERNARY_HELPURL = "https://en.wikipedia.org/wiki/%3F:";
/** @export */ Blockly.Msg.LOGIC_TERNARY_IF_FALSE = "if false";
/** @export */ Blockly.Msg.LOGIC_TERNARY_IF_TRUE = "if true";
/** @export */ Blockly.Msg.LOGIC_TERNARY_TOOLTIP = "Check the condition in 'test'. If the condition is true, returns the 'if true' value; otherwise returns the 'if false' value.";
/** @export */ Blockly.Msg.MATH_ADDITION_SYMBOL = "+";
/** @export */ Blockly.Msg.MATH_ARITHMETIC_HELPURL = "https://en.wikipedia.org/wiki/Arithmetic";
/** @export */ Blockly.Msg.MATH_ARITHMETIC_TOOLTIP_ADD = "Return the sum of the two numbers.";
/** @export */ Blockly.Msg.MATH_ARITHMETIC_TOOLTIP_DIVIDE = "Return the quotient of the two numbers.";
/** @export */ Blockly.Msg.MATH_ARITHMETIC_TOOLTIP_MINUS = "Return the difference of the two numbers.";
/** @export */ Blockly.Msg.MATH_ARITHMETIC_TOOLTIP_MULTIPLY = "Return the product of the two numbers.";
/** @export */ Blockly.Msg.MATH_ARITHMETIC_TOOLTIP_POWER = "Return the first number raised to the power of the second number.";
/** @export */ Blockly.Msg.MATH_CHANGE_HELPURL = "https://en.wikipedia.org/wiki/Programming_idiom#Incrementing_a_counter";
/** @export */ Blockly.Msg.MATH_CHANGE_TITLE = "change %1 by %2";
/** @export */ Blockly.Msg.MATH_CHANGE_TOOLTIP = "Add a number to variable '%1'.";
/** @export */ Blockly.Msg.MATH_CONSTANT_HELPURL = "https://en.wikipedia.org/wiki/Mathematical_constant";
/** @export */ Blockly.Msg.MATH_CONSTANT_TOOLTIP = "Return one of the common constants: Ï (3.141â¦), e (2.718â¦), Ï (1.618â¦), sqrt(2) (1.414â¦), sqrt(Â½) (0.707â¦), or â (infinity).";
/** @export */ Blockly.Msg.MATH_CONSTRAIN_HELPURL = "https://en.wikipedia.org/wiki/Clamping_(graphics)";
/** @export */ Blockly.Msg.MATH_CONSTRAIN_TITLE = "constrain %1 low %2 high %3";
/** @export */ Blockly.Msg.MATH_CONSTRAIN_TOOLTIP = "Constrain a number to be between the specified limits (inclusive).";
/** @export */ Blockly.Msg.MATH_DIVISION_SYMBOL = "Ã·";
/** @export */ Blockly.Msg.MATH_IS_DIVISIBLE_BY = "is divisible by";
/** @export */ Blockly.Msg.MATH_IS_EVEN = "is even";
/** @export */ Blockly.Msg.MATH_IS_NEGATIVE = "is negative";
/** @export */ Blockly.Msg.MATH_IS_ODD = "is odd";
/** @export */ Blockly.Msg.MATH_IS_POSITIVE = "is positive";
/** @export */ Blockly.Msg.MATH_IS_PRIME = "is prime";
/** @export */ Blockly.Msg.MATH_IS_TOOLTIP = "Check if a number is an even, odd, prime, whole, positive, negative, or if it is divisible by certain number. Returns true or false.";
/** @export */ Blockly.Msg.MATH_IS_WHOLE = "is whole";
/** @export */ Blockly.Msg.MATH_MODULO_HELPURL = "https://en.wikipedia.org/wiki/Modulo_operation";
/** @export */ Blockly.Msg.MATH_MODULO_TITLE = "remainder of %1 Ã· %2";
/** @export */ Blockly.Msg.MATH_MODULO_TOOLTIP = "Return the remainder from dividing the two numbers.";
/** @export */ Blockly.Msg.MATH_MULTIPLICATION_SYMBOL = "Ã";
/** @export */ Blockly.Msg.MATH_NUMBER_HELPURL = "https://en.wikipedia.org/wiki/Number";
/** @export */ Blockly.Msg.MATH_NUMBER_TOOLTIP = "A number.";
/** @export */ Blockly.Msg.MATH_ONLIST_HELPURL = "";
/** @export */ Blockly.Msg.MATH_ONLIST_OPERATOR_AVERAGE = "average of list";
/** @export */ Blockly.Msg.MATH_ONLIST_OPERATOR_MAX = "max of list";
/** @export */ Blockly.Msg.MATH_ONLIST_OPERATOR_MEDIAN = "median of list";
/** @export */ Blockly.Msg.MATH_ONLIST_OPERATOR_MIN = "min of list";
/** @export */ Blockly.Msg.MATH_ONLIST_OPERATOR_MODE = "modes of list";
/** @export */ Blockly.Msg.MATH_ONLIST_OPERATOR_RANDOM = "random item of list";
/** @export */ Blockly.Msg.MATH_ONLIST_OPERATOR_STD_DEV = "standard deviation of list";
/** @export */ Blockly.Msg.MATH_ONLIST_OPERATOR_SUM = "sum of list";
/** @export */ Blockly.Msg.MATH_ONLIST_TOOLTIP_AVERAGE = "Return the average (arithmetic mean) of the numeric values in the list.";
/** @export */ Blockly.Msg.MATH_ONLIST_TOOLTIP_MAX = "Return the largest number in the list.";
/** @export */ Blockly.Msg.MATH_ONLIST_TOOLTIP_MEDIAN = "Return the median number in the list.";
/** @export */ Blockly.Msg.MATH_ONLIST_TOOLTIP_MIN = "Return the smallest number in the list.";
/** @export */ Blockly.Msg.MATH_ONLIST_TOOLTIP_MODE = "Return a list of the most common item(s) in the list.";
/** @export */ Blockly.Msg.MATH_ONLIST_TOOLTIP_RANDOM = "Return a random element from the list.";
/** @export */ Blockly.Msg.MATH_ONLIST_TOOLTIP_STD_DEV = "Return the standard deviation of the list.";
/** @export */ Blockly.Msg.MATH_ONLIST_TOOLTIP_SUM = "Return the sum of all the numbers in the list.";
/** @export */ Blockly.Msg.MATH_POWER_SYMBOL = "^";
/** @export */ Blockly.Msg.MATH_RANDOM_FLOAT_HELPURL = "https://en.wikipedia.org/wiki/Random_number_generation";
/** @export */ Blockly.Msg.MATH_RANDOM_FLOAT_TITLE_RANDOM = "random fraction";
/** @export */ Blockly.Msg.MATH_RANDOM_FLOAT_TOOLTIP = "Return a random fraction between 0.0 (inclusive) and 1.0 (exclusive).";
/** @export */ Blockly.Msg.MATH_RANDOM_INT_HELPURL = "https://en.wikipedia.org/wiki/Random_number_generation";
/** @export */ Blockly.Msg.MATH_RANDOM_INT_TITLE = "random integer from %1 to %2";
/** @export */ Blockly.Msg.MATH_RANDOM_INT_TOOLTIP = "Return a random integer between the two specified limits, inclusive.";
/** @export */ Blockly.Msg.MATH_ROUND_HELPURL = "https://en.wikipedia.org/wiki/Rounding";
/** @export */ Blockly.Msg.MATH_ROUND_OPERATOR_ROUND = "round";
/** @export */ Blockly.Msg.MATH_ROUND_OPERATOR_ROUNDDOWN = "round down";
/** @export */ Blockly.Msg.MATH_ROUND_OPERATOR_ROUNDUP = "round up";
/** @export */ Blockly.Msg.MATH_ROUND_TOOLTIP = "Round a number up or down.";
/** @export */ Blockly.Msg.MATH_SINGLE_HELPURL = "https://en.wikipedia.org/wiki/Square_root";
/** @export */ Blockly.Msg.MATH_SINGLE_OP_ABSOLUTE = "absolute";
/** @export */ Blockly.Msg.MATH_SINGLE_OP_ROOT = "square root";
/** @export */ Blockly.Msg.MATH_SINGLE_TOOLTIP_ABS = "Return the absolute value of a number.";
/** @export */ Blockly.Msg.MATH_SINGLE_TOOLTIP_EXP = "Return e to the power of a number.";
/** @export */ Blockly.Msg.MATH_SINGLE_TOOLTIP_LN = "Return the natural logarithm of a number.";
/** @export */ Blockly.Msg.MATH_SINGLE_TOOLTIP_LOG10 = "Return the base 10 logarithm of a number.";
/** @export */ Blockly.Msg.MATH_SINGLE_TOOLTIP_NEG = "Return the negation of a number.";
/** @export */ Blockly.Msg.MATH_SINGLE_TOOLTIP_POW10 = "Return 10 to the power of a number.";
/** @export */ Blockly.Msg.MATH_SINGLE_TOOLTIP_ROOT = "Return the square root of a number.";
/** @export */ Blockly.Msg.MATH_SUBTRACTION_SYMBOL = "-";
/** @export */ Blockly.Msg.MATH_TRIG_ACOS = "acos";
/** @export */ Blockly.Msg.MATH_TRIG_ASIN = "asin";
/** @export */ Blockly.Msg.MATH_TRIG_ATAN = "atan";
/** @export */ Blockly.Msg.MATH_TRIG_COS = "cos";
/** @export */ Blockly.Msg.MATH_TRIG_HELPURL = "https://en.wikipedia.org/wiki/Trigonometric_functions";
/** @export */ Blockly.Msg.MATH_TRIG_SIN = "sin";
/** @export */ Blockly.Msg.MATH_TRIG_TAN = "tan";
/** @export */ Blockly.Msg.MATH_TRIG_TOOLTIP_ACOS = "Return the arccosine of a number.";
/** @export */ Blockly.Msg.MATH_TRIG_TOOLTIP_ASIN = "Return the arcsine of a number.";
/** @export */ Blockly.Msg.MATH_TRIG_TOOLTIP_ATAN = "Return the arctangent of a number.";
/** @export */ Blockly.Msg.MATH_TRIG_TOOLTIP_COS = "Return the cosine of a degree (not radian).";
/** @export */ Blockly.Msg.MATH_TRIG_TOOLTIP_SIN = "Return the sine of a degree (not radian).";
/** @export */ Blockly.Msg.MATH_TRIG_TOOLTIP_TAN = "Return the tangent of a degree (not radian).";
/** @export */ Blockly.Msg.NEW_INSTANCE = "New instance...";
/** @export */ Blockly.Msg.NEW_INSTANCE_TITLE = "New instance name:";
/** @export */ Blockly.Msg.NEW_VARIABLE = "Create variable...";
/** @export */ Blockly.Msg.NEW_VARIABLE_TITLE = "New variable name:";
/** @export */ Blockly.Msg.ORDINAL_NUMBER_SUFFIX = "";
/** @export */ Blockly.Msg.OXOCARD_AUDIO_GET_VOLUME_TIP = "Get the volume from the audio output";
/** @export */ Blockly.Msg.OXOCARD_AUDIO_GET_VOLUME_TITLE = "Get volume";
/** @export */ Blockly.Msg.OXOCARD_AUDIO_PLAY_RECORDED_TIP = "Plays the recorded audio data";
/** @export */ Blockly.Msg.OXOCARD_AUDIO_PLAY_RECORDED_TITLE = "Play recorded";
/** @export */ Blockly.Msg.OXOCARD_AUDIO_PLAY_TONE_HZ_TIP = "Plays a tone in Herz";
/** @export */ Blockly.Msg.OXOCARD_AUDIO_PLAY_TONE_HZ_TITLE = "Play tone (Herz)";
/** @export */ Blockly.Msg.OXOCARD_AUDIO_PLAY_TONE_TIP = "Plays a tone. the octave can set with the corresponding block";
/** @export */ Blockly.Msg.OXOCARD_AUDIO_PLAY_TONE_TITLE = "Play tone";
/** @export */ Blockly.Msg.OXOCARD_AUDIO_RECORD_FOR_TIP = "Record audio data for given time in milliseconds";
/** @export */ Blockly.Msg.OXOCARD_AUDIO_RECORD_FOR_TITLE = "Record for";
/** @export */ Blockly.Msg.OXOCARD_AUDIO_SET_BPM_TIP = "Set the global beats per minute (BPM)";
/** @export */ Blockly.Msg.OXOCARD_AUDIO_SET_BPM_TITLE = "Set BPM";
/** @export */ Blockly.Msg.OXOCARD_AUDIO_SET_OCTAVE_TIP = "Sets the global octave for the tones";
/** @export */ Blockly.Msg.OXOCARD_AUDIO_SET_OCTAVE_TITLE = "Set octave";
/** @export */ Blockly.Msg.OXOCARD_AUDIO_SET_VOLUME_TIP = "Set the voume of the audio output";
/** @export */ Blockly.Msg.OXOCARD_AUDIO_SET_VOLUME_TITLE = "Set volume";
/** @export */ Blockly.Msg.OXOCARD_AUDIO_SET_WAVEFORM_TIP = "Sets the global waveform for the tones";
/** @export */ Blockly.Msg.OXOCARD_AUDIO_SET_WAVEFORM_TITLE = "Set waveform";
/** @export */ Blockly.Msg.OXOCARD_AUDIO_STOP_TONE_TIP = "Stops the current playing tone";
/** @export */ Blockly.Msg.OXOCARD_AUDIO_STOP_TONE_TITLE = "Stop Tone";
/** @export */ Blockly.Msg.OXOCARD_AUDIO_VOLUME_DOWN_TIP = "Turns the volume one step down";
/** @export */ Blockly.Msg.OXOCARD_AUDIO_VOLUME_DOWN_TITLE = "Volume down";
/** @export */ Blockly.Msg.OXOCARD_AUDIO_VOLUME_UP_TIP = "Turns the volume one step up";
/** @export */ Blockly.Msg.OXOCARD_AUDIO_VOLUME_UP_TITLE = "Volume up";
/** @export */ Blockly.Msg.OXOCARD_AUDIO_WAIT_FOR_LOUD_NOISE_TIP = "Wait until a loud noise was measured by the microphone";
/** @export */ Blockly.Msg.OXOCARD_AUDIO_WAIT_FOR_LOUD_NOISE_TITLE = "Wait for a loud noise";
/** @export */ Blockly.Msg.OXOCARD_AUDIO_WAIT_FOR_TONE_TIP = "If this is set the programm waits after every following tone";
/** @export */ Blockly.Msg.OXOCARD_AUDIO_WAIT_FOR_TONE_TITLE = "Wait after tones";
/** @export */ Blockly.Msg.OXOCARD_AUDIO_WAIT_NOT_FOR_TONE_TIP = "If this is set the programm does not wait after every following tone";
/** @export */ Blockly.Msg.OXOCARD_AUDIO_WAIT_NOT_FOR_TONE_TITLE = "Continue after tones";
/** @export */ Blockly.Msg.OXOCARD_AUDIO_WAIT_TIP = "Wait for a given tone duration";
/** @export */ Blockly.Msg.OXOCARD_AUDIO_WAIT_TITLE = "Wait";
/** @export */ Blockly.Msg.OXOCARD_AUTO_TURNOFF_TIMEOUT_FIELD = "with timeout";
/** @export */ Blockly.Msg.OXOCARD_AUTO_TURNOFF_TIP = "Enter sleep mode after given timeout";
/** @export */ Blockly.Msg.OXOCARD_AUTO_TURNOFF_TITLE = "Handle auto turnoff";
/** @export */ Blockly.Msg.OXOCARD_AUTO_TURNOFF_WP_TIP = "Enter sleep mode after 2 Minutes";
/** @export */ Blockly.Msg.OXOCARD_AUTO_TURNOFF_WP_TITLE = "Handle auto turnoff";
/** @export */ Blockly.Msg.OXOCARD_BUTTON_PRESSED_TIP = "Yes(?) if button pressed";
/** @export */ Blockly.Msg.OXOCARD_BUTTON_PRESSED_TITLE = "Is button pressed?";
/** @export */ Blockly.Msg.OXOCARD_CLEAR_DISPLAY_TIP = "Turn the whole display off";
/** @export */ Blockly.Msg.OXOCARD_CLEAR_DISPLAY_TITLE = "Clear display";
/** @export */ Blockly.Msg.OXOCARD_COMM_CHECK_FOR_BROADCAST_TIP = "Checks if the received message is a broadcast message";
/** @export */ Blockly.Msg.OXOCARD_COMM_CHECK_FOR_BROADCAST_TITLE = "Check for broadcast message";
/** @export */ Blockly.Msg.OXOCARD_COMM_CHECK_FOR_DIRECT_TIP = "Checks if the received message is a direct message";
/** @export */ Blockly.Msg.OXOCARD_COMM_CHECK_FOR_DIRECT_TITLE = "Check for direct message";
/** @export */ Blockly.Msg.OXOCARD_COMM_COMPARE_BROADCAST_MESSAGE_TIP = "Compares the received broadcast message with the given message";
/** @export */ Blockly.Msg.OXOCARD_COMM_COMPARE_BROADCAST_MESSAGE_TITLE = "Compare broadcast message";
/** @export */ Blockly.Msg.OXOCARD_COMM_COMPARE_BROADCAST_NUMBER_TIP = "Compares the received broadcast number with the given number";
/** @export */ Blockly.Msg.OXOCARD_COMM_COMPARE_BROADCAST_NUMBER_TITLE = "Compare broadcast number";
/** @export */ Blockly.Msg.OXOCARD_COMM_COMPARE_DIRECT_MESSAGE_FROM = "from";
/** @export */ Blockly.Msg.OXOCARD_COMM_COMPARE_DIRECT_MESSAGE_TIP = "Compares the direct message with the given message";
/** @export */ Blockly.Msg.OXOCARD_COMM_COMPARE_DIRECT_MESSAGE_TITLE = "Compare direct message";
/** @export */ Blockly.Msg.OXOCARD_COMM_COMPARE_DIRECT_NUMBER_TIP = "Compares the direct number with the given number";
/** @export */ Blockly.Msg.OXOCARD_COMM_COMPARE_DIRECT_NUMBER_TITLE = "Compare direct number";
/** @export */ Blockly.Msg.OXOCARD_COMM_DISABLE_TIP = "Disables the sending and receiving of messages";
/** @export */ Blockly.Msg.OXOCARD_COMM_DISABLE_TITLE = "Disable messages";
/** @export */ Blockly.Msg.OXOCARD_COMM_ENABLE_TIP = "Enables the sending and receiving of messages";
/** @export */ Blockly.Msg.OXOCARD_COMM_ENABLE_TITLE = "Enable messages with name";
/** @export */ Blockly.Msg.OXOCARD_COMM_GET_BROADCAST_MESSAGE_TIP = "Reads the text from the received broadcast message";
/** @export */ Blockly.Msg.OXOCARD_COMM_GET_BROADCAST_MESSAGE_TITLE = "Get broadcast message";
/** @export */ Blockly.Msg.OXOCARD_COMM_GET_BROADCAST_NUMBER_TIP = "Reads the number from the received broadcast message";
/** @export */ Blockly.Msg.OXOCARD_COMM_GET_BROADCAST_NUMBER_TITLE = "Get broadcast number";
/** @export */ Blockly.Msg.OXOCARD_COMM_GET_DIRECT_MESSAGE_TIP = "Reads the text from the received direct message";
/** @export */ Blockly.Msg.OXOCARD_COMM_GET_DIRECT_MESSAGE_TITLE = "Get direct message";
/** @export */ Blockly.Msg.OXOCARD_COMM_GET_DIRECT_NUMBER_TIP = "Reads the number from the received direct message";
/** @export */ Blockly.Msg.OXOCARD_COMM_GET_DIRECT_NUMBER_TITLE = "Get number";
/** @export */ Blockly.Msg.OXOCARD_COMM_SEND_BROADCAST_MESSAGE_AND_NUMBER_TIP = "Broadcast a message and a number to all OXOcards";
/** @export */ Blockly.Msg.OXOCARD_COMM_SEND_BROADCAST_MESSAGE_TIP = "Broadcast a message to all OXOcards";
/** @export */ Blockly.Msg.OXOCARD_COMM_SEND_BROADCAST_MESSAGE_TITLE = "Send broadcast message";
/** @export */ Blockly.Msg.OXOCARD_COMM_SEND_BROADCAST_NUMBER_FIELD = "and number";
/** @export */ Blockly.Msg.OXOCARD_COMM_SEND_BROADCAST_NUMBER_TIP = "Broadcast a number to all OXOcards";
/** @export */ Blockly.Msg.OXOCARD_COMM_SEND_BROADCAST_NUMBER_TITLE = "Send broadcast number";
/** @export */ Blockly.Msg.OXOCARD_COMM_SEND_DIRECT_MESSAGE_AND_NUMBER_TIP = "Send a message and a number to the specified OXOcard";
/** @export */ Blockly.Msg.OXOCARD_COMM_SEND_DIRECT_MESSAGE_AT = "at";
/** @export */ Blockly.Msg.OXOCARD_COMM_SEND_DIRECT_MESSAGE_TIP = "Send a message to the specified OXOcard";
/** @export */ Blockly.Msg.OXOCARD_COMM_SEND_DIRECT_MESSAGE_TITLE = "Send direct message";
/** @export */ Blockly.Msg.OXOCARD_COMM_SEND_DIRECT_NUMBER_FIELD = "and number";
/** @export */ Blockly.Msg.OXOCARD_COMM_SEND_DIRECT_NUMBER_TIP = "Send a number to the specified OXOcard";
/** @export */ Blockly.Msg.OXOCARD_COMM_SEND_DIRECT_NUMBER_TITLE = "Send direct number";
/** @export */ Blockly.Msg.OXOCARD_COMM_WAIT_FOR_MESSAGE_TIMEOUT_FIELD = "with timeout";
/** @export */ Blockly.Msg.OXOCARD_COMM_WAIT_FOR_MESSAGE_TIMEOUT_TIP = "Waits for a given time for a message";
/** @export */ Blockly.Msg.OXOCARD_COMM_WAIT_FOR_MESSAGE_TIP = "Waits until a new message is received";
/** @export */ Blockly.Msg.OXOCARD_COMM_WAIT_FOR_MESSAGE_TITLE = "Wait for messages";
/** @export */ Blockly.Msg.OXOCARD_CONNECT_TO_INTERNET_SAWTOOTH = "Sawtooth";
/** @export */ Blockly.Msg.OXOCARD_CONNECT_TO_INTERNET_SINE = "Sine";
/** @export */ Blockly.Msg.OXOCARD_CONNECT_TO_INTERNET_SQUARE = "Square";
/** @export */ Blockly.Msg.OXOCARD_CONNECT_TO_INTERNET_TIP = "Opens a connection to the internet";
/** @export */ Blockly.Msg.OXOCARD_CONNECT_TO_INTERNET_TITLE = "Connect with internet";
/** @export */ Blockly.Msg.OXOCARD_CONNECT_TO_INTERNET_TRIANGLE = "Triangle";
/** @export */ Blockly.Msg.OXOCARD_DRAW_CHAR_TIP = "Draw single character (A - Z)";
/** @export */ Blockly.Msg.OXOCARD_DRAW_CHAR_TITLE = "Draw char";
/** @export */ Blockly.Msg.OXOCARD_DRAW_DIGIT_TIP = "Draw single digit (0 - 9)";
/** @export */ Blockly.Msg.OXOCARD_DRAW_DIGIT_TITLE = "Draw digit";
/** @export */ Blockly.Msg.OXOCARD_DRAW_NUMBER_TIP = "Draw a number (0 - 99)";
/** @export */ Blockly.Msg.OXOCARD_DRAW_NUMBER_TITLE = "Draw number";
/** @export */ Blockly.Msg.OXOCARD_FILL_DISPLAY_TIP = "Write value between 0 and 255";
/** @export */ Blockly.Msg.OXOCARD_FILL_DISPLAY_TITLE = "Fill display";
/** @export */ Blockly.Msg.OXOCARD_FIND_IBEACON_TIP = "Serach for iBeacons with the given ID";
/** @export */ Blockly.Msg.OXOCARD_FIND_IBEACON_TITLE = "Find iBeacon with the ID";
/** @export */ Blockly.Msg.OXOCARD_GET_ACCELERATION_TIP = "Return the selected accelerometer axis value";
/** @export */ Blockly.Msg.OXOCARD_GET_ACCELERATION_TITLE = "Get acceleration";
/** @export */ Blockly.Msg.OXOCARD_GET_CURSOR_VALUE_TIP = "Get the x or y value of the cursor";
/** @export */ Blockly.Msg.OXOCARD_GET_CURSOR_VALUE_TITLE = "Get cursor ";
/** @export */ Blockly.Msg.OXOCARD_GET_ORIENTATION_TIP = "Return the orientation of the OXOcard";
/** @export */ Blockly.Msg.OXOCARD_GET_ORIENTATION_TITLE = "Get orientation";
/** @export */ Blockly.Msg.OXOCARD_GET_TIMER_SECONDS_TIP = "Return the seconds value uf the timer";
/** @export */ Blockly.Msg.OXOCARD_GET_TIMER_SECONDS_TITLE = "Get timer seconds";
/** @export */ Blockly.Msg.OXOCARD_IS_ORIENTATION_DOWN_FIELD = "Down";
/** @export */ Blockly.Msg.OXOCARD_IS_ORIENTATION_HORIZONTALLY_FIELD = "Horizontally";
/** @export */ Blockly.Msg.OXOCARD_IS_ORIENTATION_TIP = "Return if the OXOcard is in the given orientation";
/** @export */ Blockly.Msg.OXOCARD_IS_ORIENTATION_TITLE = "Is orientation";
/** @export */ Blockly.Msg.OXOCARD_IS_ORIENTATION_UP_FIELD = "Up";
/** @export */ Blockly.Msg.OXOCARD_IS_ORIENTATION_VERTICALLY_FIELD = "Vertically";
/** @export */ Blockly.Msg.OXOCARD_LOGIC_OPERATION_AND = "and";
/** @export */ Blockly.Msg.OXOCARD_LOGIC_OPERATION_OR = "or";
/** @export */ Blockly.Msg.OXOCARD_LOGIC_WHILE_FOREVER_TIP = "Repeats the blocks inside forever";
/** @export */ Blockly.Msg.OXOCARD_LOGIC_WHILE_FOREVER_TITLE = "Do forever";
/** @export */ Blockly.Msg.OXOCARD_MATH_DECREMENT_TIP = "Does decrement the variable with the value -1.";
/** @export */ Blockly.Msg.OXOCARD_MATH_DECREMENT_TITLE = "Substract 1 from";
/** @export */ Blockly.Msg.OXOCARD_MATH_INCREMENT_TIP = "Does increment the variable with the value 1.";
/** @export */ Blockly.Msg.OXOCARD_MATH_INCREMENT_TITLE = "Add 1 to";
/** @export */ Blockly.Msg.OXOCARD_MATH_SET_VAR_RANDOM_TIP = "Set a given variable with a random number between two numbers";
/** @export */ Blockly.Msg.OXOCARD_MATH_SET_VAR_RANDOM_TITLE = "Random number in";
/** @export */ Blockly.Msg.OXOCARD_MATH_SET_VAR_RANDOM_TITLE2 = "from";
/** @export */ Blockly.Msg.OXOCARD_MATH_SET_VAR_RANDOM_TITLE3 = "to";
/** @export */ Blockly.Msg.OXOCARD_MATH_SET_VAR_WITH_TIP = "Set a variable with an expressin (e.g. 1*(5/8))";
/** @export */ Blockly.Msg.OXOCARD_MATH_SET_VAR_WITH_TITLE = "Set";
/** @export */ Blockly.Msg.OXOCARD_MATH_SET_VAR_WITH_TITLE2 = "with";
/** @export */ Blockly.Msg.OXOCARD_MATRIX_CLEAR_PIXEL_TIP = "Clears the pixel on the coordinates defined.";
/** @export */ Blockly.Msg.OXOCARD_MATRIX_CLEAR_PIXEL_TITLE = "Clear pixel";
/** @export */ Blockly.Msg.OXOCARD_MATRIX_CLEAR_TIP = "Will clear all pixels on the matrix.";
/** @export */ Blockly.Msg.OXOCARD_MATRIX_CLEAR_TITLE = "Clear display";
/** @export */ Blockly.Msg.OXOCARD_MATRIX_COPY_FRAME_BUFFER_CONTENT_DESTI = "from";
/** @export */ Blockly.Msg.OXOCARD_MATRIX_COPY_FRAME_BUFFER_CONTENT_SOURCE = "to";
/** @export */ Blockly.Msg.OXOCARD_MATRIX_COPY_FRAME_BUFFER_CONTENT_TIP = "Copies the content of the given source frame buffer to the other";
/** @export */ Blockly.Msg.OXOCARD_MATRIX_COPY_FRAME_BUFFER_CONTENT_TITLE = "Copy frame buffer content";
/** @export */ Blockly.Msg.OXOCARD_MATRIX_DISABLE_AUTO_UPDATE_TIP = "Disalbes that all draw functions will be drawn immediately on the display";
/** @export */ Blockly.Msg.OXOCARD_MATRIX_DISABLE_AUTO_UPDATE_TITLE = "Disable auto updating";
/** @export */ Blockly.Msg.OXOCARD_MATRIX_DRAW_ALL_TIP = "Will draw all pixels.";
/** @export */ Blockly.Msg.OXOCARD_MATRIX_DRAW_ALL_TITLE = "Draw all pixels";
/** @export */ Blockly.Msg.OXOCARD_MATRIX_DRAW_CIRCLE_RADIUS = "radius";
/** @export */ Blockly.Msg.OXOCARD_MATRIX_DRAW_CIRCLE_TIP = "Draws a circle based on given position and radius.";
/** @export */ Blockly.Msg.OXOCARD_MATRIX_DRAW_CIRCLE_TITLE = "Draw circle";
/** @export */ Blockly.Msg.OXOCARD_MATRIX_DRAW_IMAGE_TIP = "Turn on specific pixels.";
/** @export */ Blockly.Msg.OXOCARD_MATRIX_DRAW_IMAGE_TITLE = "Monochronic image";
/** @export */ Blockly.Msg.OXOCARD_MATRIX_DRAW_LINE_FROM = "From";
/** @export */ Blockly.Msg.OXOCARD_MATRIX_DRAW_LINE_TIP = "Draws a line based on the coordinates defined.";
/** @export */ Blockly.Msg.OXOCARD_MATRIX_DRAW_LINE_TITLE = "Draw line";
/** @export */ Blockly.Msg.OXOCARD_MATRIX_DRAW_LINE_TO = "To";
/** @export */ Blockly.Msg.OXOCARD_MATRIX_DRAW_NUMBER_TIP = "Draws a number to the display";
/** @export */ Blockly.Msg.OXOCARD_MATRIX_DRAW_NUMBER_TITLE = "Draw number";
/** @export */ Blockly.Msg.OXOCARD_MATRIX_DRAW_PIXEL_TIP = "Draws the pixel on the coordinates defined.";
/** @export */ Blockly.Msg.OXOCARD_MATRIX_DRAW_PIXEL_TITLE = "Draw pixel";
/** @export */ Blockly.Msg.OXOCARD_MATRIX_DRAW_RECTANGLE_HEIGHT = "height";
/** @export */ Blockly.Msg.OXOCARD_MATRIX_DRAW_RECTANGLE_TIP = "Draws a rectangle based on given positions.";
/** @export */ Blockly.Msg.OXOCARD_MATRIX_DRAW_RECTANGLE_TITLE = "Draw rectangle";
/** @export */ Blockly.Msg.OXOCARD_MATRIX_DRAW_RECTANGLE_WIDTH = "width";
/** @export */ Blockly.Msg.OXOCARD_MATRIX_DRAW_RGB_IMAGE_TIP = "Turn on specific pixels with color.";
/** @export */ Blockly.Msg.OXOCARD_MATRIX_DRAW_RGB_IMAGE_TITLE = "Multicolor image";
/** @export */ Blockly.Msg.OXOCARD_MATRIX_DRAW_TEXT_BIG_FONT = "Big font";
/** @export */ Blockly.Msg.OXOCARD_MATRIX_DRAW_TEXT_SMALL_FONT = "Small font";
/** @export */ Blockly.Msg.OXOCARD_MATRIX_DRAW_TEXT_TIP = "Draws a given text to the display";
/** @export */ Blockly.Msg.OXOCARD_MATRIX_DRAW_TEXT_TITLE = "Draw text";
/** @export */ Blockly.Msg.OXOCARD_MATRIX_DRAW_TRIANGLE_TIP = "Draws a triangle based on given positions.";
/** @export */ Blockly.Msg.OXOCARD_MATRIX_DRAW_TRIANGLE_TITLE = "Draw triangle";
/** @export */ Blockly.Msg.OXOCARD_MATRIX_ENABLE_AUTO_UPDATE_TIP = "Enalbes that all draw functions will be drawn immediately on the display";
/** @export */ Blockly.Msg.OXOCARD_MATRIX_ENABLE_AUTO_UPDATE_TITLE = "Enable auto updating";
/** @export */ Blockly.Msg.OXOCARD_MATRIX_IS_PIXEL_TIP = "Returns true if at least one color (RGB) of the pixel is set";
/** @export */ Blockly.Msg.OXOCARD_MATRIX_IS_PIXEL_TITLE = "Is pixel set?";
/** @export */ Blockly.Msg.OXOCARD_MATRIX_SET_COLOR_TIP = "The following draw-blocks will draw this color.";
/** @export */ Blockly.Msg.OXOCARD_MATRIX_SET_COLOR_TITLE = "Set pen color";
/** @export */ Blockly.Msg.OXOCARD_MATRIX_SET_COLOR_VAR_TIP = "The following draw-blocks will draw this color.";
/** @export */ Blockly.Msg.OXOCARD_MATRIX_SET_COLOR_VAR_TITLE = "Set pen color";
/** @export */ Blockly.Msg.OXOCARD_MATRIX_SET_FILL_TIP = "Geometric objects are filled when drawn.";
/** @export */ Blockly.Msg.OXOCARD_MATRIX_SET_FILL_TITLE = "Fill geometric objects";
/** @export */ Blockly.Msg.OXOCARD_MATRIX_SET_FRAME_BUFFER_TIP = "Sets the frame buffer which should be used at the moment";
/** @export */ Blockly.Msg.OXOCARD_MATRIX_SET_FRAME_BUFFER_TITLE = "Set frame buffer";
/** @export */ Blockly.Msg.OXOCARD_MATRIX_SET_NOFILL_TIP = "Geometric objects are not filled when drawn.";
/** @export */ Blockly.Msg.OXOCARD_MATRIX_SET_NOFILL_TITLE = "Empty geometric objects";
/** @export */ Blockly.Msg.OXOCARD_MATRIX_UPDATE_TIP = "Draws current image.";
/** @export */ Blockly.Msg.OXOCARD_MATRIX_UPDATE_TITLE = "Update matrix";
/** @export */ Blockly.Msg.OXOCARD_NO_AUTO_TURNOFF_TIP = "Disable the auto turnoff functionality";
/** @export */ Blockly.Msg.OXOCARD_NO_AUTO_TURNOFF_TITLE = "Disable anto turnoff";
/** @export */ Blockly.Msg.OXOCARD_NO_TONE_TIP = "Stops the tone";
/** @export */ Blockly.Msg.OXOCARD_NO_TONE_TITLE = "No tone";
/** @export */ Blockly.Msg.OXOCARD_PRINTLN_TIP = "Prints the given number or string to the console (with new line)";
/** @export */ Blockly.Msg.OXOCARD_PRINTLN_TITLE = "Println";
/** @export */ Blockly.Msg.OXOCARD_PRINT_TIP = "Prints the given number or string to the console";
/** @export */ Blockly.Msg.OXOCARD_PRINT_TITLE = "Print";
/** @export */ Blockly.Msg.OXOCARD_RANDOM_TIP = "Returns a random number between 0 an the given value";
/** @export */ Blockly.Msg.OXOCARD_RANDOM_TITLE = "Random 0 to ";
/** @export */ Blockly.Msg.OXOCARD_READ_BATTERY_VOLTAGE_TIP = "Reads the battery voltage in V";
/** @export */ Blockly.Msg.OXOCARD_READ_BATTERY_VOLTAGE_TITLE = "Read battery voltage [V]";
/** @export */ Blockly.Msg.OXOCARD_RESET_OXOCARD_TIP = "Reboots the card";
/** @export */ Blockly.Msg.OXOCARD_RESET_OXOCARD_TITLE = "Reset OXOcard";
/** @export */ Blockly.Msg.OXOCARD_RESET_TIMER_TIP = "Resets the timer";
/** @export */ Blockly.Msg.OXOCARD_RESET_TIMER_TITLE = "Reset timer";
/** @export */ Blockly.Msg.OXOCARD_SETUP_AS_IBEACON_ID_FIELD = "With the ID";
/** @export */ Blockly.Msg.OXOCARD_SETUP_AS_IBEACON_TIP = "Sets the OXOcard up as iBeacon with the given ID";
/** @export */ Blockly.Msg.OXOCARD_SETUP_AS_IBEACON_TITLE = "Setup the OXOcard as iBeacon";
/** @export */ Blockly.Msg.OXOCARD_SET_CURSOR_TIP = "Set the position of the cursor";
/** @export */ Blockly.Msg.OXOCARD_SET_CURSOR_TITLE = "Set cursor";
/** @export */ Blockly.Msg.OXOCARD_SMILE_TIP = "A simple smile :)";
/** @export */ Blockly.Msg.OXOCARD_SMILE_TITLE = "Draw smile";
/** @export */ Blockly.Msg.OXOCARD_TIME_GET_FROM_ID_1 = "Pacific - Samoa / Pago";
/** @export */ Blockly.Msg.OXOCARD_TIME_GET_FROM_ID_10 = "Atlantic - Cape Verde / Praia";
/** @export */ Blockly.Msg.OXOCARD_TIME_GET_FROM_ID_11 = "Europe - London / Lisbon";
/** @export */ Blockly.Msg.OXOCARD_TIME_GET_FROM_ID_12 = "Europe - Zurich / Warsaw";
/** @export */ Blockly.Msg.OXOCARD_TIME_GET_FROM_ID_13 = "Europe - Athens / Helsinki";
/** @export */ Blockly.Msg.OXOCARD_TIME_GET_FROM_ID_14 = "Europe - Moscow / Baghdad";
/** @export */ Blockly.Msg.OXOCARD_TIME_GET_FROM_ID_15 = "Asia - Baku / Dubai";
/** @export */ Blockly.Msg.OXOCARD_TIME_GET_FROM_ID_16 = "Asia - Karachi / Yekaterinburg";
/** @export */ Blockly.Msg.OXOCARD_TIME_GET_FROM_ID_17 = "Asia - Dhaka / Omsk";
/** @export */ Blockly.Msg.OXOCARD_TIME_GET_FROM_ID_18 = "Asia - Jakarta / Bangkok";
/** @export */ Blockly.Msg.OXOCARD_TIME_GET_FROM_ID_19 = "Asia - Beijing / Pago";
/** @export */ Blockly.Msg.OXOCARD_TIME_GET_FROM_ID_2 = "Pacific - Honolulu / Papeete";
/** @export */ Blockly.Msg.OXOCARD_TIME_GET_FROM_ID_20 = "Asia - Tokyo / Yakutsk";
/** @export */ Blockly.Msg.OXOCARD_TIME_GET_FROM_ID_21 = "Australia - Port Moresby / Brisbane";
/** @export */ Blockly.Msg.OXOCARD_TIME_GET_FROM_ID_22 = "Australia - Sydney / NoumÃ©a";
/** @export */ Blockly.Msg.OXOCARD_TIME_GET_FROM_ID_23 = "Pacific - Auckland / Suva";
/** @export */ Blockly.Msg.OXOCARD_TIME_GET_FROM_ID_3 = "Pacific - Auckland / Anchorage";
/** @export */ Blockly.Msg.OXOCARD_TIME_GET_FROM_ID_4 = "America - Los Angeles / Vancouver";
/** @export */ Blockly.Msg.OXOCARD_TIME_GET_FROM_ID_5 = "America - Phoenix / Calgary";
/** @export */ Blockly.Msg.OXOCARD_TIME_GET_FROM_ID_6 = "America - Chicago / Mexico City";
/** @export */ Blockly.Msg.OXOCARD_TIME_GET_FROM_ID_7 = "America - New York / Toronto";
/** @export */ Blockly.Msg.OXOCARD_TIME_GET_FROM_ID_8 = "America - Santiago / Halifax";
/** @export */ Blockly.Msg.OXOCARD_TIME_GET_FROM_ID_9 = "America - SÃ£o Paulo / Buenos Aires";
/** @export */ Blockly.Msg.OXOCARD_TIME_GET_FROM_TIP = "Get the time from a given city";
/** @export */ Blockly.Msg.OXOCARD_TIME_GET_FROM_TITLE = "Use timezone from ";
/** @export */ Blockly.Msg.OXOCARD_TIME_GET_VALUE_DAY = "day";
/** @export */ Blockly.Msg.OXOCARD_TIME_GET_VALUE_HOUR = "hour";
/** @export */ Blockly.Msg.OXOCARD_TIME_GET_VALUE_MINUTE = "minutes";
/** @export */ Blockly.Msg.OXOCARD_TIME_GET_VALUE_MONTH = "month";
/** @export */ Blockly.Msg.OXOCARD_TIME_GET_VALUE_SECOND = "seconds";
/** @export */ Blockly.Msg.OXOCARD_TIME_GET_VALUE_TIP = "Get a specific value from the time e.g. seconds";
/** @export */ Blockly.Msg.OXOCARD_TIME_GET_VALUE_TITLE = "Get time ";
/** @export */ Blockly.Msg.OXOCARD_TIME_GET_VALUE_WEEKDAY = "weekday";
/** @export */ Blockly.Msg.OXOCARD_TIME_GET_VALUE_YEAR = "year";
/** @export */ Blockly.Msg.OXOCARD_TIME_UPDATE_TIP = "Updates the time on the OXOcard";
/** @export */ Blockly.Msg.OXOCARD_TIME_UPDATE_TITLE = "Synchronize time";
/** @export */ Blockly.Msg.OXOCARD_TONE_DURATION_FIELD = "for the duration";
/** @export */ Blockly.Msg.OXOCARD_TONE_FREQUENCY_FIELD = "with frequency";
/** @export */ Blockly.Msg.OXOCARD_TONE_NO_DURATION_TIP = "Plays a tone";
/** @export */ Blockly.Msg.OXOCARD_TONE_NO_DURATION_TITLE = "Play tone";
/** @export */ Blockly.Msg.OXOCARD_TONE_TIP = "Plays a tone for the givern time";
/** @export */ Blockly.Msg.OXOCARD_TONE_TITLE = "Play tone";
/** @export */ Blockly.Msg.OXOCARD_TURN_DISPLAY_ON_TIP = "Turn the whole display on";
/** @export */ Blockly.Msg.OXOCARD_TURN_DISPLAY_ON_TITLE = "Turn display on";
/** @export */ Blockly.Msg.OXOCARD_TURN_OXOCARD_OFF_TIP = "Turns off the card";
/** @export */ Blockly.Msg.OXOCARD_TURN_OXOCARD_OFF_TIP2 = "Turns off the card and set the buttons able to wake the card up";
/** @export */ Blockly.Msg.OXOCARD_TURN_OXOCARD_OFF_TITLE = "Turn OXOcard off";
/** @export */ Blockly.Msg.OXOCARD_TURN_OXOCARD_OFF_TITLE2 = "Click to set the Buttons";
/** @export */ Blockly.Msg.OXOCARD_TURN_OXOCARD_OFF_TITLE3 = "to turn on again";
/** @export */ Blockly.Msg.OXOCARD_UPDATE_TIP = "Updates the OXOcard with the newest code from Blokly";
/** @export */ Blockly.Msg.OXOCARD_UPDATE_TITLE = "Update OXOcard";
/** @export */ Blockly.Msg.OXOCARD_WEATHER_GET_CITY_TIP = "Get the name of the weather";
/** @export */ Blockly.Msg.OXOCARD_WEATHER_GET_CITY_TITLE = "Weather: get city name";
/** @export */ Blockly.Msg.OXOCARD_WEATHER_GET_FROM_TIP = "Get weather from the selected city";
/** @export */ Blockly.Msg.OXOCARD_WEATHER_GET_FROM_TITLE = "Get weather from";
/** @export */ Blockly.Msg.OXOCARD_WEATHER_GET_ICON_TIP = "Get the icon number of the weather";
/** @export */ Blockly.Msg.OXOCARD_WEATHER_GET_ICON_TITLE = "Weather: get icon";
/** @export */ Blockly.Msg.OXOCARD_WEATHER_GET_VALUE_DEWPOINT = "Dew point";
/** @export */ Blockly.Msg.OXOCARD_WEATHER_GET_VALUE_HUMIDITY = "Humidity";
/** @export */ Blockly.Msg.OXOCARD_WEATHER_GET_VALUE_PRECIPITATION = "Precipitation";
/** @export */ Blockly.Msg.OXOCARD_WEATHER_GET_VALUE_TEMP = "Temperature";
/** @export */ Blockly.Msg.OXOCARD_WEATHER_GET_VALUE_TIP = "Get a value from the weather";
/** @export */ Blockly.Msg.OXOCARD_WEATHER_GET_VALUE_TITLE = "Weather: Get";
/** @export */ Blockly.Msg.OXOCARD_WEATHER_GET_VALUE_WIND = "Wind";
/** @export */ Blockly.Msg.OXOCARD_WINK_TIP = "A simple wink ;)";
/** @export */ Blockly.Msg.OXOCARD_WINK_TITLE = "Draw wink";
/** @export */ Blockly.Msg.PROCEDURES_ALLOW_STATEMENTS = "allow statements";
/** @export */ Blockly.Msg.PROCEDURES_BEFORE_PARAMS = "with:";
/** @export */ Blockly.Msg.PROCEDURES_CALLNORETURN_HELPURL = "https://en.wikipedia.org/wiki/Subroutine";
/** @export */ Blockly.Msg.PROCEDURES_CALLNORETURN_TOOLTIP = "Run the user-defined function '%1'.";
/** @export */ Blockly.Msg.PROCEDURES_CALLRETURN_HELPURL = "https://en.wikipedia.org/wiki/Subroutine";
/** @export */ Blockly.Msg.PROCEDURES_CALLRETURN_TOOLTIP = "Run the user-defined function '%1' and use its output.";
/** @export */ Blockly.Msg.PROCEDURES_CALL_BEFORE_PARAMS = "with:";
/** @export */ Blockly.Msg.PROCEDURES_CREATE_DO = "Create '%1'";
/** @export */ Blockly.Msg.PROCEDURES_DEFNORETURN_COMMENT = "Describe this function...";
/** @export */ Blockly.Msg.PROCEDURES_DEFNORETURN_DO = "";
/** @export */ Blockly.Msg.PROCEDURES_DEFNORETURN_HELPURL = "https://en.wikipedia.org/wiki/Subroutine";
/** @export */ Blockly.Msg.PROCEDURES_DEFNORETURN_PROCEDURE = "do something";
/** @export */ Blockly.Msg.PROCEDURES_DEFNORETURN_TITLE = "to";
/** @export */ Blockly.Msg.PROCEDURES_DEFNORETURN_TOOLTIP = "Creates a function with no output.";
/** @export */ Blockly.Msg.PROCEDURES_DEFRETURN_HELPURL = "https://en.wikipedia.org/wiki/Subroutine";
/** @export */ Blockly.Msg.PROCEDURES_DEFRETURN_RETURN = "return";
/** @export */ Blockly.Msg.PROCEDURES_DEFRETURN_TOOLTIP = "Creates a function with an output.";
/** @export */ Blockly.Msg.PROCEDURES_DEF_DUPLICATE_WARNING = "Warning: This function has duplicate parameters.";
/** @export */ Blockly.Msg.PROCEDURES_HIGHLIGHT_DEF = "Highlight function definition";
/** @export */ Blockly.Msg.PROCEDURES_IFRETURN_HELPURL = "http://c2.com/cgi/wiki?GuardClause";
/** @export */ Blockly.Msg.PROCEDURES_IFRETURN_TOOLTIP = "If a value is true, then return a second value.";
/** @export */ Blockly.Msg.PROCEDURES_IFRETURN_WARNING = "Warning: This block may be used only within a function definition.";
/** @export */ Blockly.Msg.PROCEDURES_MUTATORARG_TITLE = "input name:";
/** @export */ Blockly.Msg.PROCEDURES_MUTATORARG_TOOLTIP = "Add an input to the function.";
/** @export */ Blockly.Msg.PROCEDURES_MUTATORCONTAINER_TITLE = "inputs";
/** @export */ Blockly.Msg.PROCEDURES_MUTATORCONTAINER_TOOLTIP = "Add, remove, or reorder inputs to this function.";
/** @export */ Blockly.Msg.REDO = "Redo";
/** @export */ Blockly.Msg.REMOVE_COMMENT = "Remove Comment";
/** @export */ Blockly.Msg.RENAME_INSTANCE = "Rename instance...";
/** @export */ Blockly.Msg.RENAME_INSTANCE_TITLE = "Rename all '%1' instances to:";
/** @export */ Blockly.Msg.RENAME_VARIABLE = "Rename variable...";
/** @export */ Blockly.Msg.RENAME_VARIABLE_TITLE = "Rename all '%1' variables to:";
/** @export */ Blockly.Msg.TEXT_APPEND_HELPURL = "https://github.com/google/blockly/wiki/Text#text-modification";
/** @export */ Blockly.Msg.TEXT_APPEND_TITLE = "to %1 append text %2";
/** @export */ Blockly.Msg.TEXT_APPEND_TOOLTIP = "Append some text to variable '%1'.";
/** @export */ Blockly.Msg.TEXT_CHANGECASE_HELPURL = "https://github.com/google/blockly/wiki/Text#adjusting-text-case";
/** @export */ Blockly.Msg.TEXT_CHANGECASE_OPERATOR_LOWERCASE = "to lower case";
/** @export */ Blockly.Msg.TEXT_CHANGECASE_OPERATOR_TITLECASE = "to Title Case";
/** @export */ Blockly.Msg.TEXT_CHANGECASE_OPERATOR_UPPERCASE = "to UPPER CASE";
/** @export */ Blockly.Msg.TEXT_CHANGECASE_TOOLTIP = "Return a copy of the text in a different case.";
/** @export */ Blockly.Msg.TEXT_CHARAT_FIRST = "get first letter";
/** @export */ Blockly.Msg.TEXT_CHARAT_FROM_END = "get letter # from end";
/** @export */ Blockly.Msg.TEXT_CHARAT_FROM_START = "get letter #";
/** @export */ Blockly.Msg.TEXT_CHARAT_HELPURL = "https://github.com/google/blockly/wiki/Text#extracting-text";
/** @export */ Blockly.Msg.TEXT_CHARAT_LAST = "get last letter";
/** @export */ Blockly.Msg.TEXT_CHARAT_RANDOM = "get random letter";
/** @export */ Blockly.Msg.TEXT_CHARAT_TAIL = "";
/** @export */ Blockly.Msg.TEXT_CHARAT_TITLE = "in text %1 %2";
/** @export */ Blockly.Msg.TEXT_CHARAT_TOOLTIP = "Returns the letter at the specified position.";
/** @export */ Blockly.Msg.TEXT_COUNT_HELPURL = "https://github.com/google/blockly/wiki/Text#counting-substrings";
/** @export */ Blockly.Msg.TEXT_COUNT_MESSAGE0 = "count %1 in %2";
/** @export */ Blockly.Msg.TEXT_COUNT_TOOLTIP = "Count how many times some text occurs within some other text.";
/** @export */ Blockly.Msg.TEXT_CREATE_JOIN_ITEM_TOOLTIP = "Add an item to the text.";
/** @export */ Blockly.Msg.TEXT_CREATE_JOIN_TITLE_JOIN = "join";
/** @export */ Blockly.Msg.TEXT_CREATE_JOIN_TOOLTIP = "Add, remove, or reorder sections to reconfigure this text block.";
/** @export */ Blockly.Msg.TEXT_GET_SUBSTRING_END_FROM_END = "to letter # from end";
/** @export */ Blockly.Msg.TEXT_GET_SUBSTRING_END_FROM_START = "to letter #";
/** @export */ Blockly.Msg.TEXT_GET_SUBSTRING_END_LAST = "to last letter";
/** @export */ Blockly.Msg.TEXT_GET_SUBSTRING_HELPURL = "https://github.com/google/blockly/wiki/Text#extracting-a-region-of-text";
/** @export */ Blockly.Msg.TEXT_GET_SUBSTRING_INPUT_IN_TEXT = "in text";
/** @export */ Blockly.Msg.TEXT_GET_SUBSTRING_START_FIRST = "get substring from first letter";
/** @export */ Blockly.Msg.TEXT_GET_SUBSTRING_START_FROM_END = "get substring from letter # from end";
/** @export */ Blockly.Msg.TEXT_GET_SUBSTRING_START_FROM_START = "get substring from letter #";
/** @export */ Blockly.Msg.TEXT_GET_SUBSTRING_TAIL = "";
/** @export */ Blockly.Msg.TEXT_GET_SUBSTRING_TOOLTIP = "Returns a specified portion of the text.";
/** @export */ Blockly.Msg.TEXT_INDEXOF_HELPURL = "https://github.com/google/blockly/wiki/Text#finding-text";
/** @export */ Blockly.Msg.TEXT_INDEXOF_OPERATOR_FIRST = "find first occurrence of text";
/** @export */ Blockly.Msg.TEXT_INDEXOF_OPERATOR_LAST = "find last occurrence of text";
/** @export */ Blockly.Msg.TEXT_INDEXOF_TITLE = "in text %1 %2 %3";
/** @export */ Blockly.Msg.TEXT_INDEXOF_TOOLTIP = "Returns the index of the first/last occurrence of the first text in the second text. Returns %1 if text is not found.";
/** @export */ Blockly.Msg.TEXT_ISEMPTY_HELPURL = "https://github.com/google/blockly/wiki/Text#checking-for-empty-text";
/** @export */ Blockly.Msg.TEXT_ISEMPTY_TITLE = "%1 is empty";
/** @export */ Blockly.Msg.TEXT_ISEMPTY_TOOLTIP = "Returns true if the provided text is empty.";
/** @export */ Blockly.Msg.TEXT_JOIN_HELPURL = "https://github.com/google/blockly/wiki/Text#text-creation";
/** @export */ Blockly.Msg.TEXT_JOIN_TITLE_CREATEWITH = "create text with";
/** @export */ Blockly.Msg.TEXT_JOIN_TOOLTIP = "Create a piece of text by joining together any number of items.";
/** @export */ Blockly.Msg.TEXT_LENGTH_HELPURL = "https://github.com/google/blockly/wiki/Text#text-modification";
/** @export */ Blockly.Msg.TEXT_LENGTH_TITLE = "length of %1";
/** @export */ Blockly.Msg.TEXT_LENGTH_TOOLTIP = "Returns the number of letters (including spaces) in the provided text.";
/** @export */ Blockly.Msg.TEXT_PRINT_HELPURL = "https://github.com/google/blockly/wiki/Text#printing-text";
/** @export */ Blockly.Msg.TEXT_PRINT_TITLE = "print %1";
/** @export */ Blockly.Msg.TEXT_PRINT_TOOLTIP = "Print the specified text, number or other value.";
/** @export */ Blockly.Msg.TEXT_PROMPT_HELPURL = "https://github.com/google/blockly/wiki/Text#getting-input-from-the-user";
/** @export */ Blockly.Msg.TEXT_PROMPT_TOOLTIP_NUMBER = "Prompt for user for a number.";
/** @export */ Blockly.Msg.TEXT_PROMPT_TOOLTIP_TEXT = "Prompt for user for some text.";
/** @export */ Blockly.Msg.TEXT_PROMPT_TYPE_NUMBER = "prompt for number with message";
/** @export */ Blockly.Msg.TEXT_PROMPT_TYPE_TEXT = "prompt for text with message";
/** @export */ Blockly.Msg.TEXT_REPLACE_HELPURL = "https://github.com/google/blockly/wiki/Text#replacing-substrings";
/** @export */ Blockly.Msg.TEXT_REPLACE_MESSAGE0 = "replace %1 with %2 in %3";
/** @export */ Blockly.Msg.TEXT_REPLACE_TOOLTIP = "Replace all occurances of some text within some other text.";
/** @export */ Blockly.Msg.TEXT_REVERSE_HELPURL = "https://github.com/google/blockly/wiki/Text#reversing-text";
/** @export */ Blockly.Msg.TEXT_REVERSE_MESSAGE0 = "reverse %1";
/** @export */ Blockly.Msg.TEXT_REVERSE_TOOLTIP = "Reverses the order of the characters in the text.";
/** @export */ Blockly.Msg.TEXT_TEXT_HELPURL = "https://en.wikipedia.org/wiki/String_(computer_science)";
/** @export */ Blockly.Msg.TEXT_TEXT_TOOLTIP = "A letter, word, or line of text.";
/** @export */ Blockly.Msg.TEXT_TRIM_HELPURL = "https://github.com/google/blockly/wiki/Text#trimming-removing-spaces";
/** @export */ Blockly.Msg.TEXT_TRIM_OPERATOR_BOTH = "trim spaces from both sides of";
/** @export */ Blockly.Msg.TEXT_TRIM_OPERATOR_LEFT = "trim spaces from left side of";
/** @export */ Blockly.Msg.TEXT_TRIM_OPERATOR_RIGHT = "trim spaces from right side of";
/** @export */ Blockly.Msg.TEXT_TRIM_TOOLTIP = "Return a copy of the text with spaces removed from one or both ends.";
/** @export */ Blockly.Msg.TODAY = "Today";
/** @export */ Blockly.Msg.UNDO = "Undo";
/** @export */ Blockly.Msg.VARIABLES_DEFAULT_NAME = "item";
/** @export */ Blockly.Msg.VARIABLES_GET_CREATE_SET = "Create 'set %1'";
/** @export */ Blockly.Msg.VARIABLES_GET_HELPURL = "https://github.com/google/blockly/wiki/Variables#get";
/** @export */ Blockly.Msg.VARIABLES_GET_TOOLTIP = "Returns the value of this variable.";
/** @export */ Blockly.Msg.VARIABLES_SET = "set %1 to %2";
/** @export */ Blockly.Msg.VARIABLES_SET_CREATE_GET = "Create 'get %1'";
/** @export */ Blockly.Msg.VARIABLES_SET_HELPURL = "https://github.com/google/blockly/wiki/Variables#set";
/** @export */ Blockly.Msg.VARIABLES_SET_TOOLTIP = "Sets this variable to be equal to the input.";
/** @export */ Blockly.Msg.VARIABLE_ALREADY_EXISTS = "A variable named '%1' already exists.";
/** @export */ Blockly.Msg.VARIABLE_ALREADY_EXISTS_FOR_ANOTHER_TYPE = "A variable named '%1' already exists for another variable of type '%2'.";
/** @export */ Blockly.Msg.PROCEDURES_DEFRETURN_TITLE = Blockly.Msg.PROCEDURES_DEFNORETURN_TITLE;
/** @export */ Blockly.Msg.CONTROLS_IF_IF_TITLE_IF = Blockly.Msg.CONTROLS_IF_MSG_IF;
/** @export */ Blockly.Msg.CONTROLS_WHILEUNTIL_INPUT_DO = Blockly.Msg.CONTROLS_REPEAT_INPUT_DO;
/** @export */ Blockly.Msg.CONTROLS_IF_MSG_THEN = Blockly.Msg.CONTROLS_REPEAT_INPUT_DO;
/** @export */ Blockly.Msg.CONTROLS_IF_ELSE_TITLE_ELSE = Blockly.Msg.CONTROLS_IF_MSG_ELSE;
/** @export */ Blockly.Msg.PROCEDURES_DEFRETURN_PROCEDURE = Blockly.Msg.PROCEDURES_DEFNORETURN_PROCEDURE;
/** @export */ Blockly.Msg.LISTS_GET_SUBLIST_INPUT_IN_LIST = Blockly.Msg.LISTS_INLIST;
/** @export */ Blockly.Msg.LISTS_GET_INDEX_INPUT_IN_LIST = Blockly.Msg.LISTS_INLIST;
/** @export */ Blockly.Msg.MATH_CHANGE_TITLE_ITEM = Blockly.Msg.VARIABLES_DEFAULT_NAME;
/** @export */ Blockly.Msg.PROCEDURES_DEFRETURN_DO = Blockly.Msg.PROCEDURES_DEFNORETURN_DO;
/** @export */ Blockly.Msg.CONTROLS_IF_ELSEIF_TITLE_ELSEIF = Blockly.Msg.CONTROLS_IF_MSG_ELSEIF;
/** @export */ Blockly.Msg.LISTS_GET_INDEX_HELPURL = Blockly.Msg.LISTS_INDEX_OF_HELPURL;
/** @export */ Blockly.Msg.CONTROLS_FOREACH_INPUT_DO = Blockly.Msg.CONTROLS_REPEAT_INPUT_DO;
/** @export */ Blockly.Msg.LISTS_SET_INDEX_INPUT_IN_LIST = Blockly.Msg.LISTS_INLIST;
/** @export */ Blockly.Msg.CONTROLS_FOR_INPUT_DO = Blockly.Msg.CONTROLS_REPEAT_INPUT_DO;
/** @export */ Blockly.Msg.LISTS_CREATE_WITH_ITEM_TITLE = Blockly.Msg.VARIABLES_DEFAULT_NAME;
/** @export */ Blockly.Msg.TEXT_APPEND_VARIABLE = Blockly.Msg.VARIABLES_DEFAULT_NAME;
/** @export */ Blockly.Msg.TEXT_CREATE_JOIN_ITEM_TITLE_ITEM = Blockly.Msg.VARIABLES_DEFAULT_NAME;
/** @export */ Blockly.Msg.LISTS_INDEX_OF_INPUT_IN_LIST = Blockly.Msg.LISTS_INLIST;
/** @export */ Blockly.Msg.PROCEDURES_DEFRETURN_COMMENT = Blockly.Msg.PROCEDURES_DEFNORETURN_COMMENT;

/** @export */ Blockly.Msg.MATH_HUE = "230";
/** @export */ Blockly.Msg.LOOPS_HUE = "120";
/** @export */ Blockly.Msg.LISTS_HUE = "260";
/** @export */ Blockly.Msg.LOGIC_HUE = "210";
/** @export */ Blockly.Msg.VARIABLES_HUE = "330";
/** @export */ Blockly.Msg.TEXTS_HUE = "160";
/** @export */ Blockly.Msg.PROCEDURES_HUE = "290";
/** @export */ Blockly.Msg.COLOUR_HUE = "20";